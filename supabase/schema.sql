-- Eliminar tablas existentes si es necesario para empezar de cero.
DROP TABLE IF EXISTS offers;
DROP TABLE IF EXISTS commitments;
DROP TABLE IF EXISTS guides;
DROP TABLE IF EXISTS companies;

-- Tabla para perfiles de empresas.
CREATE TABLE companies (
    id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    name text,
    email text UNIQUE,
    avatar text,
    specialties text[],
    details text
);

-- Tabla para perfiles de guías.
CREATE TABLE guides (
    id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    name text,
    email text UNIQUE,
    avatar text,
    specialties text[],
    languages text[],
    rate numeric,
    availability date[]
);

-- Tabla para ofertas de trabajo de empresas a guías.
CREATE TABLE offers (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    company_id uuid NOT NULL REFERENCES companies(id) ON DELETE CASCADE,
    guide_id uuid NOT NULL REFERENCES guides(id) ON DELETE CASCADE,
    job_type text,
    description text,
    start_date date,
    end_date date,
    status text DEFAULT 'pending'
);

-- Tabla para compromisos/contratos aceptados.
CREATE TABLE commitments (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    company_id uuid NOT NULL REFERENCES companies(id) ON DELETE CASCADE,
    guide_id uuid NOT NULL REFERENCES guides(id) ON DELETE CASCADE,
    job_type text,
    start_date date,
    end_date date,
    company_rating integer CHECK (company_rating >= 1 AND company_rating <= 5),
    guide_rating integer CHECK (guide_rating >= 1 AND guide_rating <= 5)
);

-- Políticas de Seguridad a Nivel de Fila (RLS)

-- RLS para la tabla 'companies'
ALTER TABLE companies ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access to companies" ON companies FOR SELECT USING (true);
CREATE POLICY "Allow users to insert their own company profile" ON companies FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Allow users to update their own company profile" ON companies FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);

-- RLS para la tabla 'guides'
ALTER TABLE guides ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access to guides" ON guides FOR SELECT USING (true);
CREATE POLICY "Allow users to insert their own guide profile" ON guides FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Allow users to update their own guide profile" ON guides FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);

-- RLS para la tabla 'offers'
ALTER TABLE offers ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow related users to view offers" ON offers FOR SELECT USING (auth.uid() = company_id OR auth.uid() = guide_id);
CREATE POLICY "Allow companies to create offers" ON offers FOR INSERT WITH CHECK (auth.uid() = company_id);
CREATE POLICY "Allow guides to update offer status" ON offers FOR UPDATE USING (auth.uid() = guide_id) WITH CHECK (status IN ('accepted', 'rejected'));

-- RLS para la tabla 'commitments'
ALTER TABLE commitments ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow related users to view commitments" ON commitments FOR SELECT USING (auth.uid() = company_id OR auth.uid() = guide_id);
CREATE POLICY "Allow companies to create commitments" ON commitments FOR INSERT WITH CHECK (auth.uid() = company_id);
CREATE POLICY "Allow related users to update ratings in commitments" ON commitments FOR UPDATE USING (auth.uid() = company_id OR auth.uid() = guide_id);
